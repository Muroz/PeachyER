:root{
  --yellow: #ffc600;
  /* to use put in code var(--yellow) instead of the actual color name or hex code */
}
html {
  /* border-box box model allows us to add padding and border to our elements without increasing their size */
  box-sizing: border-box;
  /* A system font stack so things load nice and quick! */
  font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica,
    Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";
  font-weight: 900;
  font-size: 10px;
  color: var(--black);
  text-shadow: 0 2px 0 rgba(0, 0, 0, 0.07);
}

/*
  WAT IS THIS?!
  We inherit box-sizing: border-box; from our <html> selector
  Apparently this is a bit better than applying box-sizing: border-box; directly to the * selector
*/
*,
*:before,
*:after {
  box-sizing: inherit;
}

body {
  background-size: 340px, auto;
  min-height: calc(100vh - 100px);
  margin: 50px;
  /* background: white; */
  background-position: fixed;
  letter-spacing: -1px;
}
a {
}

.dashboard_contentBlock {
  margin-left: 20;
  margin-right: 20;
  margin-top: 10;
  margin-bottom: 20;
  background: #ffffff;
  height: 250;
  text-align: center;

}

.navbar {
  background-color:#ffffff;  
  width: 100%;
  height:80;
}

.logo {
  margin-top: 18;
  width: 100;
  height: 40;
}

.barElement {
  text-align: center;
  margin-top:30;
}

.profile_pic{

  margin-top: 5;
  width: 55;
  height: 55;
  border-radius: 25px;
  float:left;
}
.profile_content{
  margin-left:70;
  text-align: left;
}
.profile_name{
  margin-top: 10;

}

.log_out{
  margin-top: 10;

}

.dashboard_background{
 background: #A6B2DD;
 width: 100%;
 height: 100%;

 align-items: center;
}

.dashboard_title{
  margin-left: 10;
}

.navbar_profile{
  float: right;
  margin-right: 30;
}

.navbar_ul {
    list-style-type: none;
    margin: 0;
    padding: 0;

    background-color: #ffffff;
    justify-content: center; /* align horizontal */
    align-items: center;
    
}

.navbar_li {
    float: left;

}

li a {
    display: block;
    color: black;
    text-align: center;
    padding: 14px 16px;
    height: 80;
    display: table-cell;
    vertical-align: middle;
}

li a:hover:not(.active) {
    background-color: #111;
}

.active {
    background-color: #4CAF50;
}



.summaryView_container{
  margin-top:10;
}



/* container tryout */

/* Style the container with a rounded border, grey background and some padding and margin */
.container {
    border: 2px solid #ccc;
    background-color: #eee;
    border-radius: 5px;
    padding: 16px;
    display: block;
    margin: auto;
    margin-top: 80;
}

/* Clear floats after containers */
.container::after {
    content: "";
    clear: both;
    display: table;
}

/* Add media queries for responsiveness. This will center both the text and the image inside the container */
@media (max-width: 500px) {
  .container {
    text-align: center;
  }
}

.staffList_container{
  margin-top: 30;
}

.clientList_container{
  margin-top: 30;
}

h1 {
  margin: 0;
  padding: 0;
}
html, body, .app {
  margin: 0;
  padding: 0;
  width: 100%;
  height: 100%;
}
.addButton_overlay {

  position: fixed;
  width: 100%;
  height: 100%;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  margin: auto;
  background-color: rgba(0,0,0, 0.5);
  z-index:10;
  position:relative
}
.addButton_popup {
  position: absolute;
  left: 25%;
  right: 25%;
  top: 25%;
  bottom: 25%;
  margin: auto;
  background: white;
}

.clientProfile_scheduleView {
}

.clientProfile_cell {
  border: 1px solid black;
}

.timeColumn_container{
  display: grid;
  grid-template-columns: [left-side] 100px [center-side] 500px [right-side] 200fr [end-side]; /* also repeat (5, 100px 2fr); also 25%  fr gets whatever is left after everything is drawn also auto depends on the item with the biggest content on it */
  grid-template-rows: 100px 200px 300px;
  grid-auto-rows: 200px; /* passing extra values here is buggy on firefox, but not in chrome */
  grid-gap: 20px;
  grid-auto-columns: 150px;
  grid-auto-flow: row; /* could also be column */
  /* autofill is used at repeat(auto-fill, 150px) to set up the number of columns depending on the available content */
  /* similar to autofill, auto-fit set depending on the number of columns, but doesnt expand if moved */
  /* minmax(minval, maxval) instead of giving a size for the column */
  /* fitcontent(maxval) sets the maximum size instead of using auto */
  /* grid-template-area : "name1 name2 name3" "undername1 undername2 undername3" or "here here2 ." . means nothing */
  /* can also use namearea-start or namearea-end instead of numbers to delimit ranges */
  /* grid-auto-flow dense to fill all the gaps */
  /* adding !important at the end of anything overwrites anything else */
}
 
 /*cool stuff
  item:nth-child(6n) {

  }
  adds css to any item multiple of 6 i.e. item6 item 12 etc */

.timeColum_item {
  /* We center the contents of these items. You can also do this with flexbox too! */
  display: grid;
  justify-content: center;
  align-items: center;
  border: 5px solid rgba(0, 0, 0, 0.03);
  border-radius: 3px;
  font-size: 35px;
  background-color: var(--yellow); /* best colour */
  /*grid-column: span 2;
  grid-row: span 2;
  grid-column-start: 2;
  grid-column-end:5; or grid-column:2/5;  == -1 gets it to the end to get 100% witdh
  same with grid-row
  grid-area: footer would move it there*/
}

.timeColum_item p {
  margin: 0 0 5px 0;
}

/*@media (max-width: 700px){
  .container{
    grid-template-areas:
      "content content content"
      "stuff stuff stuff"
      "so so so"
  }
}*/